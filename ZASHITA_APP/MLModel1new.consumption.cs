// This file was auto-generated by ML.NET Model Builder.
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
namespace ZASHITA_APP
{
    public partial class MLModel1new
    {
        /// <summary>
        /// model input class for MLModel1new.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [LoadColumn(0)]
            [ColumnName(@"SHA256")]
            public string SHA256 { get; set; }

            [LoadColumn(1)]
            [ColumnName(@"Type")]
            public float Type { get; set; }

            [LoadColumn(2)]
            [ColumnName(@"e_magic")]
            public float E_magic { get; set; }

            [LoadColumn(3)]
            [ColumnName(@"e_cblp")]
            public float E_cblp { get; set; }

            [LoadColumn(4)]
            [ColumnName(@"e_cp")]
            public float E_cp { get; set; }

            [LoadColumn(5)]
            [ColumnName(@"e_crlc")]
            public float E_crlc { get; set; }

            [LoadColumn(6)]
            [ColumnName(@"e_cparhdr")]
            public float E_cparhdr { get; set; }

            [LoadColumn(7)]
            [ColumnName(@"e_minalloc")]
            public float E_minalloc { get; set; }

            [LoadColumn(8)]
            [ColumnName(@"e_maxalloc")]
            public float E_maxalloc { get; set; }

            [LoadColumn(9)]
            [ColumnName(@"e_ss")]
            public float E_ss { get; set; }

            [LoadColumn(10)]
            [ColumnName(@"e_sp")]
            public float E_sp { get; set; }

            [LoadColumn(11)]
            [ColumnName(@"e_csum")]
            public float E_csum { get; set; }

            [LoadColumn(12)]
            [ColumnName(@"e_ip")]
            public float E_ip { get; set; }

            [LoadColumn(13)]
            [ColumnName(@"e_cs")]
            public float E_cs { get; set; }

            [LoadColumn(14)]
            [ColumnName(@"e_lfarlc")]
            public float E_lfarlc { get; set; }

            [LoadColumn(15)]
            [ColumnName(@"e_ovno")]
            public float E_ovno { get; set; }

            [LoadColumn(16)]
            [ColumnName(@"e_oemid")]
            public float E_oemid { get; set; }

            [LoadColumn(17)]
            [ColumnName(@"e_oeminfo")]
            public float E_oeminfo { get; set; }

            [LoadColumn(18)]
            [ColumnName(@"e_lfanew")]
            public float E_lfanew { get; set; }

            [LoadColumn(19)]
            [ColumnName(@"Machine")]
            public float Machine { get; set; }

            [LoadColumn(20)]
            [ColumnName(@"NumberOfSections")]
            public float NumberOfSections { get; set; }

            [LoadColumn(21)]
            [ColumnName(@"TimeDateStamp")]
            public float TimeDateStamp { get; set; }

            [LoadColumn(22)]
            [ColumnName(@"PointerToSymbolTable")]
            public float PointerToSymbolTable { get; set; }

            [LoadColumn(23)]
            [ColumnName(@"NumberOfSymbols")]
            public float NumberOfSymbols { get; set; }

            [LoadColumn(24)]
            [ColumnName(@"SizeOfOptionalHeader")]
            public float SizeOfOptionalHeader { get; set; }

            [LoadColumn(25)]
            [ColumnName(@"Characteristics")]
            public float Characteristics { get; set; }

            [LoadColumn(26)]
            [ColumnName(@"Magic")]
            public float Magic { get; set; }

            [LoadColumn(27)]
            [ColumnName(@"MajorLinkerVersion")]
            public float MajorLinkerVersion { get; set; }

            [LoadColumn(28)]
            [ColumnName(@"MinorLinkerVersion")]
            public float MinorLinkerVersion { get; set; }

            [LoadColumn(29)]
            [ColumnName(@"SizeOfCode")]
            public float SizeOfCode { get; set; }

            [LoadColumn(30)]
            [ColumnName(@"SizeOfInitializedData")]
            public float SizeOfInitializedData { get; set; }

            [LoadColumn(31)]
            [ColumnName(@"SizeOfUninitializedData")]
            public float SizeOfUninitializedData { get; set; }

            [LoadColumn(32)]
            [ColumnName(@"AddressOfEntryPoint")]
            public float AddressOfEntryPoint { get; set; }

            [LoadColumn(33)]
            [ColumnName(@"BaseOfCode")]
            public float BaseOfCode { get; set; }

            [LoadColumn(34)]
            [ColumnName(@"ImageBase")]
            public float ImageBase { get; set; }

            [LoadColumn(35)]
            [ColumnName(@"SectionAlignment")]
            public float SectionAlignment { get; set; }

            [LoadColumn(36)]
            [ColumnName(@"FileAlignment")]
            public float FileAlignment { get; set; }

            [LoadColumn(37)]
            [ColumnName(@"MajorOperatingSystemVersion")]
            public float MajorOperatingSystemVersion { get; set; }

            [LoadColumn(38)]
            [ColumnName(@"MinorOperatingSystemVersion")]
            public float MinorOperatingSystemVersion { get; set; }

            [LoadColumn(39)]
            [ColumnName(@"MajorImageVersion")]
            public float MajorImageVersion { get; set; }

            [LoadColumn(40)]
            [ColumnName(@"MinorImageVersion")]
            public float MinorImageVersion { get; set; }

            [LoadColumn(41)]
            [ColumnName(@"MajorSubsystemVersion")]
            public float MajorSubsystemVersion { get; set; }

            [LoadColumn(42)]
            [ColumnName(@"MinorSubsystemVersion")]
            public float MinorSubsystemVersion { get; set; }

            [LoadColumn(43)]
            [ColumnName(@"Reserved1")]
            public float Reserved1 { get; set; }

            [LoadColumn(44)]
            [ColumnName(@"SizeOfImage")]
            public float SizeOfImage { get; set; }

            [LoadColumn(45)]
            [ColumnName(@"SizeOfHeaders")]
            public float SizeOfHeaders { get; set; }

            [LoadColumn(46)]
            [ColumnName(@"CheckSum")]
            public float CheckSum { get; set; }

            [LoadColumn(47)]
            [ColumnName(@"Subsystem")]
            public float Subsystem { get; set; }

            [LoadColumn(48)]
            [ColumnName(@"DllCharacteristics")]
            public float DllCharacteristics { get; set; }

            [LoadColumn(49)]
            [ColumnName(@"SizeOfStackReserve")]
            public float SizeOfStackReserve { get; set; }

            [LoadColumn(50)]
            [ColumnName(@"SizeOfHeapReserve")]
            public float SizeOfHeapReserve { get; set; }

            [LoadColumn(51)]
            [ColumnName(@"SizeOfHeapCommit")]
            public float SizeOfHeapCommit { get; set; }

            [LoadColumn(52)]
            [ColumnName(@"LoaderFlags")]
            public float LoaderFlags { get; set; }

            [LoadColumn(53)]
            [ColumnName(@"NumberOfRvaAndSizes")]
            public float NumberOfRvaAndSizes { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for MLModel1new.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName(@"SHA256")]
            public float[] SHA256 { get; set; }

            [ColumnName(@"Type")]
            public uint Type { get; set; }

            [ColumnName(@"e_magic")]
            public float E_magic { get; set; }

            [ColumnName(@"e_cblp")]
            public float E_cblp { get; set; }

            [ColumnName(@"e_cp")]
            public float E_cp { get; set; }

            [ColumnName(@"e_crlc")]
            public float E_crlc { get; set; }

            [ColumnName(@"e_cparhdr")]
            public float E_cparhdr { get; set; }

            [ColumnName(@"e_minalloc")]
            public float E_minalloc { get; set; }

            [ColumnName(@"e_maxalloc")]
            public float E_maxalloc { get; set; }

            [ColumnName(@"e_ss")]
            public float E_ss { get; set; }

            [ColumnName(@"e_sp")]
            public float E_sp { get; set; }

            [ColumnName(@"e_csum")]
            public float E_csum { get; set; }

            [ColumnName(@"e_ip")]
            public float E_ip { get; set; }

            [ColumnName(@"e_cs")]
            public float E_cs { get; set; }

            [ColumnName(@"e_lfarlc")]
            public float E_lfarlc { get; set; }

            [ColumnName(@"e_ovno")]
            public float E_ovno { get; set; }

            [ColumnName(@"e_oemid")]
            public float E_oemid { get; set; }

            [ColumnName(@"e_oeminfo")]
            public float E_oeminfo { get; set; }

            [ColumnName(@"e_lfanew")]
            public float E_lfanew { get; set; }

            [ColumnName(@"Machine")]
            public float Machine { get; set; }

            [ColumnName(@"NumberOfSections")]
            public float NumberOfSections { get; set; }

            [ColumnName(@"TimeDateStamp")]
            public float TimeDateStamp { get; set; }

            [ColumnName(@"PointerToSymbolTable")]
            public float PointerToSymbolTable { get; set; }

            [ColumnName(@"NumberOfSymbols")]
            public float NumberOfSymbols { get; set; }

            [ColumnName(@"SizeOfOptionalHeader")]
            public float SizeOfOptionalHeader { get; set; }

            [ColumnName(@"Characteristics")]
            public float Characteristics { get; set; }

            [ColumnName(@"Magic")]
            public float Magic { get; set; }

            [ColumnName(@"MajorLinkerVersion")]
            public float MajorLinkerVersion { get; set; }

            [ColumnName(@"MinorLinkerVersion")]
            public float MinorLinkerVersion { get; set; }

            [ColumnName(@"SizeOfCode")]
            public float SizeOfCode { get; set; }

            [ColumnName(@"SizeOfInitializedData")]
            public float SizeOfInitializedData { get; set; }

            [ColumnName(@"SizeOfUninitializedData")]
            public float SizeOfUninitializedData { get; set; }

            [ColumnName(@"AddressOfEntryPoint")]
            public float AddressOfEntryPoint { get; set; }

            [ColumnName(@"BaseOfCode")]
            public float BaseOfCode { get; set; }

            [ColumnName(@"ImageBase")]
            public float ImageBase { get; set; }

            [ColumnName(@"SectionAlignment")]
            public float SectionAlignment { get; set; }

            [ColumnName(@"FileAlignment")]
            public float FileAlignment { get; set; }

            [ColumnName(@"MajorOperatingSystemVersion")]
            public float MajorOperatingSystemVersion { get; set; }

            [ColumnName(@"MinorOperatingSystemVersion")]
            public float MinorOperatingSystemVersion { get; set; }

            [ColumnName(@"MajorImageVersion")]
            public float MajorImageVersion { get; set; }

            [ColumnName(@"MinorImageVersion")]
            public float MinorImageVersion { get; set; }

            [ColumnName(@"MajorSubsystemVersion")]
            public float MajorSubsystemVersion { get; set; }

            [ColumnName(@"MinorSubsystemVersion")]
            public float MinorSubsystemVersion { get; set; }

            [ColumnName(@"Reserved1")]
            public float Reserved1 { get; set; }

            [ColumnName(@"SizeOfImage")]
            public float SizeOfImage { get; set; }

            [ColumnName(@"SizeOfHeaders")]
            public float SizeOfHeaders { get; set; }

            [ColumnName(@"CheckSum")]
            public float CheckSum { get; set; }

            [ColumnName(@"Subsystem")]
            public float Subsystem { get; set; }

            [ColumnName(@"DllCharacteristics")]
            public float DllCharacteristics { get; set; }

            [ColumnName(@"SizeOfStackReserve")]
            public float SizeOfStackReserve { get; set; }

            [ColumnName(@"SizeOfHeapReserve")]
            public float SizeOfHeapReserve { get; set; }

            [ColumnName(@"SizeOfHeapCommit")]
            public float SizeOfHeapCommit { get; set; }

            [ColumnName(@"LoaderFlags")]
            public float LoaderFlags { get; set; }

            [ColumnName(@"NumberOfRvaAndSizes")]
            public float NumberOfRvaAndSizes { get; set; }

            [ColumnName(@"Features")]
            public float[] Features { get; set; }

            [ColumnName(@"PredictedLabel")]
            public float PredictedLabel { get; set; }

            [ColumnName(@"Score")]
            public float[] Score { get; set; }

        }

        #endregion

        private static string MLNetModelPath = Path.GetFullPath("MLModel1new.mlnet");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);


        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }

        /// <summary>
        /// Use this method to predict scores for all possible labels.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static IOrderedEnumerable<KeyValuePair<string, float>> PredictAllLabels(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            var result = predEngine.Predict(input);
            return GetSortedScoresWithLabels(result);
        }

        /// <summary>
        /// Map the unlabeled result score array to the predicted label names.
        /// </summary>
        /// <param name="result">Prediction to get the labeled scores from.</param>
        /// <returns>Ordered list of label and score.</returns>
        /// <exception cref="Exception"></exception>
        public static IOrderedEnumerable<KeyValuePair<string, float>> GetSortedScoresWithLabels(ModelOutput result)
        {
            var unlabeledScores = result.Score;
            var labelNames = GetLabels(result);

            Dictionary<string, float> labledScores = new Dictionary<string, float>();
            for (int i = 0; i < labelNames.Count(); i++)
            {
                // Map the names to the predicted result score array
                var labelName = labelNames.ElementAt(i);
                labledScores.Add(labelName.ToString(), unlabeledScores[i]);
            }

            return labledScores.OrderByDescending(c => c.Value);
        }

        /// <summary>
        /// Get the ordered label names.
        /// </summary>
        /// <param name="result">Predicted result to get the labels from.</param>
        /// <returns>List of labels.</returns>
        /// <exception cref="Exception"></exception>
        private static IEnumerable<string> GetLabels(ModelOutput result)
        {
            var schema = PredictEngine.Value.OutputSchema;

            var labelColumn = schema.GetColumnOrNull("Type");
            if (labelColumn == null)
            {
                throw new Exception("Type column not found. Make sure the name searched for matches the name in the schema.");
            }

            // Key values contains an ordered array of the possible labels. This allows us to map the results to the correct label value.
            var keyNames = new VBuffer<float>();
            labelColumn.Value.GetKeyValues(ref keyNames);
            return keyNames.DenseValues().Select(x => x.ToString());
        }

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }
    }
}
