// This file was auto-generated by ML.NET Model Builder.
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML.Trainers.LightGbm;

namespace ZASHITA_APP
{
    public partial class MLModel1new
    {
        public const string RetrainFilePath =  @"C:\Datasets\PE_Header.csv"; // HERE U NEED TO COPY THE PE_Header.csv FILE FROM THE dataset FOLDER IN THE PROJECT THEN PAST IT IN THE dataset FOLDER U CREATED IN THE C DISK !!!!! 
        public const char RetrainSeparatorChar = ',';
        public const bool RetrainHasHeader =  true;
        public const bool RetrainAllowQuoting =  false;

         /// <summary>
        /// Train a new model with the provided dataset.
        /// </summary>
        /// <param name="outputModelPath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet"</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        public static void Train(string outputModelPath, string inputDataFilePath = RetrainFilePath, char separatorChar = RetrainSeparatorChar, bool hasHeader = RetrainHasHeader, bool allowQuoting = RetrainAllowQuoting)
        {
            var mlContext = new MLContext();

            var data = LoadIDataViewFromFile(mlContext, inputDataFilePath, separatorChar, hasHeader, allowQuoting);
            var model = RetrainModel(mlContext, data);
            SaveModel(mlContext, model, data, outputModelPath);
        }

        /// <summary>
        /// Load an IDataView from a file path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        /// <returns>IDataView with loaded training data.</returns>
        public static IDataView LoadIDataViewFromFile(MLContext mlContext, string inputDataFilePath, char separatorChar, bool hasHeader, bool allowQuoting)
        {
            return mlContext.Data.LoadFromTextFile<ModelInput>(inputDataFilePath, separatorChar, hasHeader, allowQuoting: allowQuoting);
        }


        /// <summary>
        /// Save a model at the specified path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="model">Model to save.</param>
        /// <param name="data">IDataView used to train the model.</param>
        /// <param name="modelSavePath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet.</param>
        public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
        {
            // Pull the data schema from the IDataView used for training the model
            DataViewSchema dataViewSchema = data.Schema;

            using (var fs = File.Create(modelSavePath))
            {
                mlContext.Model.Save(model, dataViewSchema, fs);
            }
        }


        /// <summary>
        /// Retrain model using the pipeline generated as part of the training process.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"e_magic", @"e_magic"),new InputOutputColumnPair(@"e_cblp", @"e_cblp"),new InputOutputColumnPair(@"e_cp", @"e_cp"),new InputOutputColumnPair(@"e_crlc", @"e_crlc"),new InputOutputColumnPair(@"e_cparhdr", @"e_cparhdr"),new InputOutputColumnPair(@"e_minalloc", @"e_minalloc"),new InputOutputColumnPair(@"e_maxalloc", @"e_maxalloc"),new InputOutputColumnPair(@"e_ss", @"e_ss"),new InputOutputColumnPair(@"e_sp", @"e_sp"),new InputOutputColumnPair(@"e_csum", @"e_csum"),new InputOutputColumnPair(@"e_ip", @"e_ip"),new InputOutputColumnPair(@"e_cs", @"e_cs"),new InputOutputColumnPair(@"e_lfarlc", @"e_lfarlc"),new InputOutputColumnPair(@"e_ovno", @"e_ovno"),new InputOutputColumnPair(@"e_oemid", @"e_oemid"),new InputOutputColumnPair(@"e_oeminfo", @"e_oeminfo"),new InputOutputColumnPair(@"e_lfanew", @"e_lfanew"),new InputOutputColumnPair(@"Machine", @"Machine"),new InputOutputColumnPair(@"NumberOfSections", @"NumberOfSections"),new InputOutputColumnPair(@"TimeDateStamp", @"TimeDateStamp"),new InputOutputColumnPair(@"PointerToSymbolTable", @"PointerToSymbolTable"),new InputOutputColumnPair(@"NumberOfSymbols", @"NumberOfSymbols"),new InputOutputColumnPair(@"SizeOfOptionalHeader", @"SizeOfOptionalHeader"),new InputOutputColumnPair(@"Characteristics", @"Characteristics"),new InputOutputColumnPair(@"Magic", @"Magic"),new InputOutputColumnPair(@"MajorLinkerVersion", @"MajorLinkerVersion"),new InputOutputColumnPair(@"MinorLinkerVersion", @"MinorLinkerVersion"),new InputOutputColumnPair(@"SizeOfCode", @"SizeOfCode"),new InputOutputColumnPair(@"SizeOfInitializedData", @"SizeOfInitializedData"),new InputOutputColumnPair(@"SizeOfUninitializedData", @"SizeOfUninitializedData"),new InputOutputColumnPair(@"AddressOfEntryPoint", @"AddressOfEntryPoint"),new InputOutputColumnPair(@"BaseOfCode", @"BaseOfCode"),new InputOutputColumnPair(@"ImageBase", @"ImageBase"),new InputOutputColumnPair(@"SectionAlignment", @"SectionAlignment"),new InputOutputColumnPair(@"FileAlignment", @"FileAlignment"),new InputOutputColumnPair(@"MajorOperatingSystemVersion", @"MajorOperatingSystemVersion"),new InputOutputColumnPair(@"MinorOperatingSystemVersion", @"MinorOperatingSystemVersion"),new InputOutputColumnPair(@"MajorImageVersion", @"MajorImageVersion"),new InputOutputColumnPair(@"MinorImageVersion", @"MinorImageVersion"),new InputOutputColumnPair(@"MajorSubsystemVersion", @"MajorSubsystemVersion"),new InputOutputColumnPair(@"MinorSubsystemVersion", @"MinorSubsystemVersion"),new InputOutputColumnPair(@"Reserved1", @"Reserved1"),new InputOutputColumnPair(@"SizeOfImage", @"SizeOfImage"),new InputOutputColumnPair(@"SizeOfHeaders", @"SizeOfHeaders"),new InputOutputColumnPair(@"CheckSum", @"CheckSum"),new InputOutputColumnPair(@"Subsystem", @"Subsystem"),new InputOutputColumnPair(@"DllCharacteristics", @"DllCharacteristics"),new InputOutputColumnPair(@"SizeOfStackReserve", @"SizeOfStackReserve"),new InputOutputColumnPair(@"SizeOfHeapReserve", @"SizeOfHeapReserve"),new InputOutputColumnPair(@"SizeOfHeapCommit", @"SizeOfHeapCommit"),new InputOutputColumnPair(@"LoaderFlags", @"LoaderFlags"),new InputOutputColumnPair(@"NumberOfRvaAndSizes", @"NumberOfRvaAndSizes")})      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"SHA256",outputColumnName:@"SHA256"))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"e_magic",@"e_cblp",@"e_cp",@"e_crlc",@"e_cparhdr",@"e_minalloc",@"e_maxalloc",@"e_ss",@"e_sp",@"e_csum",@"e_ip",@"e_cs",@"e_lfarlc",@"e_ovno",@"e_oemid",@"e_oeminfo",@"e_lfanew",@"Machine",@"NumberOfSections",@"TimeDateStamp",@"PointerToSymbolTable",@"NumberOfSymbols",@"SizeOfOptionalHeader",@"Characteristics",@"Magic",@"MajorLinkerVersion",@"MinorLinkerVersion",@"SizeOfCode",@"SizeOfInitializedData",@"SizeOfUninitializedData",@"AddressOfEntryPoint",@"BaseOfCode",@"ImageBase",@"SectionAlignment",@"FileAlignment",@"MajorOperatingSystemVersion",@"MinorOperatingSystemVersion",@"MajorImageVersion",@"MinorImageVersion",@"MajorSubsystemVersion",@"MinorSubsystemVersion",@"Reserved1",@"SizeOfImage",@"SizeOfHeaders",@"CheckSum",@"Subsystem",@"DllCharacteristics",@"SizeOfStackReserve",@"SizeOfHeapReserve",@"SizeOfHeapCommit",@"LoaderFlags",@"NumberOfRvaAndSizes",@"SHA256"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"Type",inputColumnName:@"Type",addKeyValueAnnotationsAsText:false))      
                                    .Append(mlContext.MulticlassClassification.Trainers.LightGbm(new LightGbmMulticlassTrainer.Options(){NumberOfLeaves=1458,NumberOfIterations=1007,MinimumExampleCountPerLeaf=20,LearningRate=0.018981182631267413,LabelColumnName=@"Type",FeatureColumnName=@"Features",Booster=new GradientBooster.Options(){SubsampleFraction=0.7906937807437,FeatureFraction=0.8920951330395824,L1Regularization=2E-10,L2Regularization=0.9999997766729865},MaximumBinCountPerFeature=152}))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
 }